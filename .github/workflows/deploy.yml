name: Docker Image Build and ECS Deployment

on:
  push:
    branches: [ master ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}          # AWS bölgesi (örn: eu-central-1)
  ECR_REPO: ${{ secrets.ECR_REPO }}             # ECR repository URI (örn: 123456789012.dkr.ecr.eu-central-1.amazonaws.com/my-repo)
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}       # ECS cluster adı
  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}       # ECS service adı

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # 1. Kaynak kodunu checkout et
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. AWS kimlik bilgilerini yapılandır
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. Docker Buildx kurulumu
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:master

      # 4. Amazon ECR'ye giriş yap
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      # 5. Build için tag oluştur (GitHub run number + commit hash)
      - name: Generate image tag
        id: tag
        run: |
          SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-8)
          echo "TAG=build-${GITHUB_RUN_NUMBER}-${SHORT_SHA}" >> $GITHUB_ENV
          echo "IMAGE_URI=${{ secrets.ECR_REPO }}:$TAG" >> $GITHUB_ENV

      # 6. Docker imajını build et ve ECR'ye pushla
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ secrets.IMAGE_URI }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 7. Task definition dosyasını güncelle
      - name: Update task definition
        run: |
          # Task definition şablonunu indir (eğer repo içinde değilse)
          # aws ecs describe-task-definition --task-definition your-task-definition > task-definition.json
          
          # Güncellenmiş task definition oluştur
          jq --arg IMAGE_URI "${{ secrets.IMAGE_URI }}" \
            '.containerDefinitions[0].image = $IMAGE_URI' \
            task-definition.json > task-def-updated.json
          
          # Kontrol için içeriği göster
          cat task-def-updated.json

      # 8. ECS'ye deploy et
      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: task-def-updated.json
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true
          force-new-deployment: true